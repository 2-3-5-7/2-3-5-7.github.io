{
    "version": "https://jsonfeed.org/version/1",
    "title": "自强不息 厚德载物 • All posts by \"4. 分享与备份\" category",
    "description": "分享各种内容，方便自己与他人查阅，欢迎评论",
    "home_page_url": "https://synrst.de",
    "items": [
        {
            "id": "https://synrst.de/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/blog/",
            "url": "https://synrst.de/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/blog/",
            "title": "blog",
            "date_published": "1970-01-01T00:00:00.000Z",
            "content_html": "<h1 id=\"1-部署\"><a href=\"#1-部署\" class=\"headerlink\" title=\"1 部署\"></a>1 部署</h1><ol>\n<li>安装 git、node.js，参考 <a href=\"https://hexo.io/zh-cn/docs/\">hexo 官网</a>，windows、linux 有区别。git 设置 sock5 代理，见 <a href=\"/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/blog/../git/\">git</a></li>\n<li>github 创建 username.github.io 仓库，实测要用官方的流程设置一下主题才能开通。添加 ssh 密钥</li>\n<li>安装 hexo 、主题、插件，主题可根据<a href=\"https://github.com/mark0smith/Hexo_theme_stats\">star 排名</a>来选择</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npx hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm i hexo-theme-icarus hexo-generator-sitemap hexo-relative-link hexo-mermaid-lastest hexo-filename-title</span><br><span class=\"line\"><span class=\"comment\"># 要在 config 中添加配置</span></span><br><span class=\"line\">npm i hexo-auto-category hexo-feed hexo-extract-excerpt hexo-deployer-git</span><br><span class=\"line\"><span class=\"comment\"># source 目录下，关联笔记</span></span><br><span class=\"line\">mklink /J _posts D:\\Documents\\Dropbox\\notes\\blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还有一个 footnote 插件从 hexo-theme-fluid 移植过来</span></span><br><span class=\"line\"><span class=\"comment\"># 还有 add_assets_url.js 添加下载图标</span></span><br><span class=\"line\"><span class=\"comment\"># 所有插件可通过 hexo --debug 选项看到</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Google-收录\"><a href=\"#1-1-Google-收录\" class=\"headerlink\" title=\"1.1 Google 收录\"></a>1.1 Google 收录</h2><ul>\n<li>先创建 Google Analytics，添加 tracking_id 到主题配置文件，注意广告拦截和浏览器拦截</li>\n<li>再创建 Google Search Console，用 Google Analytics 验证所有权</li>\n<li>在 Google Analytics 选择媒体资源，Search Console 关联，进行两个产品的关联</li>\n<li>在 Search Console 中提交站点地图 sitemap.xml</li>\n</ul>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2 使用\"></a>2 使用</h1><ul>\n<li>原则是避免手动配置 front-matter，尽量自动生成，保持界面简洁易用</li>\n<li>常用命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 server 预览</span></span><br><span class=\"line\">npx hexo clean &amp;&amp; npx hexo s --p 10000</span><br><span class=\"line\"><span class=\"comment\"># 生成（只在确认生成文件时会用到）</span></span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\"><span class=\"comment\"># 不加 --generate 会导致修改不推送</span></span><br><span class=\"line\"><span class=\"comment\"># 下划线 _ 开头的文件永远不会被推送</span></span><br><span class=\"line\"><span class=\"comment\"># 此外对于 exclude 的文件，clean 后首次不推送，再执行一次就可以推送了</span></span><br><span class=\"line\"><span class=\"comment\"># 所以保险起见每次执行两次这个命令</span></span><br><span class=\"line\">npx hexo deploy --generate</span><br><span class=\"line\"><span class=\"comment\"># 可清除博客的更新历史记录，会导致全量部署</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf .deploy_git</span><br></pre></td></tr></table></figure></li>\n<li>后期，如果流量大，图片和 asset 放到 github 其它 repo 上，避免超过 github pages 流量 100G&#x2F;月 的限制</li>\n</ul>\n<h2 id=\"2-1-编写插件\"><a href=\"#2-1-编写插件\" class=\"headerlink\" title=\"2.1 编写插件\"></a>2.1 编写插件</h2><ul>\n<li>插件的 <a href=\"https://hexo.io/zh-cn/api/filter.html\">优先级</a> 值越低越先处理原始 md 文件，因此低优先级可避免被其它插件的处理结果影响</li>\n</ul>\n<h1 id=\"3-维护\"><a href=\"#3-维护\" class=\"headerlink\" title=\"3 维护\"></a>3 维护</h1><ul>\n<li>备份：hexo 目录下所有内容（文章除外） git 记录修改，push 到 github 上</li>\n<li>还原：<ul>\n<li>装 git、node<ul>\n<li>node 用 ppa <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04\">装最新版本 18.x</a></li>\n</ul>\n</li>\n<li>从 github clone，linux 环境要卸载原 hexo，重新安装（不清楚为何不跨平台），其它插件看起来没问题<ul>\n<li>db.json 报错：<code>手动创建 </code>blog\\node_modules\\mime-db\\db.json<code>，文件内容空 object</code>{}&#96;</li>\n<li>这个 linux 环境作为 linux branch push 到 github 来备份</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>更新博客<ul>\n<li>通过 rclone 挂载 GoogleDrive，再 <code>ln -s</code> 创建软链接到 <code>source/_posts</code><ul>\n<li>rclone 从官网下载 arm 版本</li>\n<li>sudo apt install fuse3，rclone mount 需要<ul>\n<li>rclone 退出而没自动 umount 的情况（文件被占用），手动 <code>sudo umount</code> 一下</li>\n</ul>\n</li>\n<li>按 rclone config 提示，获得 GoogleDrive API 相关参数</li>\n<li>创建 gd 文件夹，只读挂载 <code>./rclone --cache-dir=rc_cache --temp-dir=rc_temp mount gd: gd --vfs-cache-mode full --read-only</code></li>\n</ul>\n</li>\n<li>rclone 放到 screen 里面运行，.zshrc 添加 <code>screen -x</code>，登录后就恢复上次的环境</li>\n<li>配置 cron 每两小时自动 <code>npx hexo deploy --generate</code> 更新博客</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://synrst.de/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/Kopia/",
            "url": "https://synrst.de/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/Kopia/",
            "title": "Kopia",
            "date_published": "1970-01-01T00:00:00.000Z",
            "content_html": "<h1 id=\"1-Kopia\"><a href=\"#1-Kopia\" class=\"headerlink\" title=\"1 Kopia\"></a>1 Kopia</h1><ul>\n<li><p>KopiaUI 程序所在目录新建 <code>repositories</code>，实现 <a href=\"https://github.com/kopia/kopia/pull/398\">portable</a>、<a href=\"https://github.com/kopia/kopia/issues/2282\">更详细的描述</a></p>\n</li>\n<li><p>VSS</p>\n<ul>\n<li><p>先在 <code>repository.config</code> 中 <code>enableActions</code> 改为 true，然后用命令配置全局 profile（因为 gui 目前有 bug）</p>\n  <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令的前部分从 GUI 里面复制</span></span><br><span class=\"line\">XXX\\kopia.exe <span class=\"literal\">--config-file</span>=XXX\\repositories\\repository.config policy <span class=\"built_in\">set</span> <span class=\"literal\">--global</span>  <span class=\"literal\">--before-snapshot-root-action</span> <span class=\"string\">&quot;powershell D:\\soft\\KopiaUI\\before.ps1&quot;</span></span><br><span class=\"line\">XXX\\kopia.exe <span class=\"literal\">--config-file</span>=XXX\\repositories\\repository.config  policy <span class=\"built_in\">set</span> <span class=\"literal\">--global</span>  <span class=\"literal\">--after-snapshot-root-action</span>  <span class=\"string\">&quot;powershell D:\\soft\\KopiaUI\\after.ps1&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 要清空配置传空字符串 &quot;&quot;</span></span><br><span class=\"line\">XXX\\kopia.exe <span class=\"literal\">--config-file</span>=XXX\\repositories\\repository.config  policy <span class=\"built_in\">set</span> <span class=\"literal\">--global</span>  <span class=\"literal\">--after-snapshot-root-action</span>  <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管理员 powershell，<code>Set-ExecutionPolicy Unrestricted</code></p>\n</li>\n<li><p>修改 ps1 关联，用 powershell 运行</p>\n</li>\n<li><p>before 脚本里有调试信息，放开后可用来确认脚本执行和备份路径</p>\n</li>\n<li><p><a href=\"https://www.ubackup.com/windows-10/shadow-copy-windows-10-4348.html\">查看和删除 vss</a>，防止 after 脚本没执行，<code>vssadmin list shadows</code>，<code>vssadmin delete shadows</code></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://kopia.io/docs/reference/command-line/\">常用命令</a>（软件的路径<u><em>区分大小写</em></u>，尽管 Windows 不区分）</p>\n  <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repository status</span><br><span class=\"line\">policy <span class=\"built_in\">ls</span></span><br><span class=\"line\">policy show D:\\</span><br><span class=\"line\">policy show <span class=\"literal\">--global</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GUI 设置全局 policy，备份 10 个，其它为 0，忽略相同备份，zstd 压缩</p>\n</li>\n<li><p><code>.kopiaignore</code> 文件，路径用 <code>/</code> 分隔，且相对路径以 <code>/</code> 起始，如 <code>/pagefile.sys</code>、<code>/Windows/Temp/</code></p>\n<ul>\n<li>系统盘排除内容可参考 dism++ 配置</li>\n<li>ignore 内容少，直接保存到 global 中配置 Ignore Files 列表，不用 <code>.kopiaignore</code></li>\n<li><code>snapshot estimate D:\\</code> 确认 ignore 生效</li>\n</ul>\n</li>\n<li><p>创建 <code>snapshot create D:\\</code>，由于只备份一个路径（D:\\），所以用 global profile 即可</p>\n</li>\n<li><p>确认备份过程是否存在错误，<code>snapshot ls</code> 和 <code>show 前一个命令的 ID</code>，<a href=\"https://kopia.discourse.group/t/tracking-down-backup-errors/126/2\">参考</a></p>\n</li>\n<li><p>以后，定期确认备份文件是否正确，<code>snap verify --verify-files-percent 1</code>，<a href=\"https://kopia.discourse.group/t/best-method-to-ensure-valid-snapshots-snapshot-verify-vs-snapshot-fix-invalid-files/1217/2\">参考</a></p>\n</li>\n<li><p>删除的 snapshot 对应的文件会 <a href=\"https://kopia.discourse.group/t/clearing-the-repository-after-deleting-a-snapshot/575\">延迟 24h 左右删除</a></p>\n</li>\n<li><p><code>diff OLDID NEWID</code> 显示 snap 区别</p>\n</li>\n<li><p>可手动 snap 然后 pin，pin 的 snap 不计入 <code>Latest Snapshots</code> 的设置中</p>\n</li>\n<li><p>sync-to 可以暂停后恢复，而直接推送到云端，即 snap create 则不能</p>\n<ul>\n<li>推送到云端，<code> repository sync-to rclone --remote-path=alist_local:/阿里云盘/d_backup --rclone-exe=D:\\soft\\KopiaUI\\rclone-alist\\rclone.exe --delete --dry-run</code>，实际用去掉 <code>--dry-run</code>，<a href=\"https://kopia.discourse.group/t/configure-multiple-repositories/1194\">参考</a></li>\n<li>对阿里云盘，初始版本用官方客户端上传更快，sync-to 速度要慢一倍</li>\n<li>对 Onedrive，rclone + alist 的上传速度要好于只用 rclone。同样初始版本选择官方客户端，同步盘手动上传技巧<ul>\n<li>设置 onedrive 同步路径为 NOBACK 文件夹里</li>\n<li><code>mklink /J &quot;F:\\FNOBACK\\OneDrive - MSFT\\g_backup&quot; &quot;F:\\g_backup&quot;</code> 开启上传</li>\n<li>上传后，客户端退出 Onedrive 账户，删除 OneDrive 文件夹</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>开机同步、关机备份脚本，同步可以并行，备份不能，会出错。此外备份如果添加到组策略中，会要求输入密码</p>\n<ul>\n<li>为了将关机的快捷方式固定到任务栏，需要加 <code>cmd /c</code>，如 <code>C:\\Windows\\System32\\cmd.exe /C D:\\shutdown_backup.bat</code></li>\n</ul>\n</li>\n<li><p>其它</p>\n<ul>\n<li>Kopia 类似工具不适合备份系统，因为即使用了 VSS，甚至用 SYSTEM 用户权限执行，也会出现某些文件没权限读取，比如某些文件只能当前用户可读</li>\n<li><a href=\"https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/\">SYSTEM 用户执行 </a>使用 PSTools，管理员 powershell，执行 <code>.\\PsExec.exe -sid powershell</code>，获得 SYSTEM 的 shell<ul>\n<li>可在任务管理器，详细信息中确认进程的用户</li>\n</ul>\n</li>\n<li>如要用 Kopia 备份 linux，我认为可尝试 restic 相关<a href=\"https://forum.restic.net/t/lack-of-documentation-on-how-to-do-a-full-system-back-up/659/5\">问答</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-1-Alist-Rclone\"><a href=\"#1-1-Alist-Rclone\" class=\"headerlink\" title=\"1.1 Alist  Rclone\"></a>1.1 Alist  Rclone</h2><ul>\n<li>kopia 支持 webdav 但效果不好，所以再套一层 rclone 来上传备份</li>\n<li>alist<ul>\n<li><code>alist start</code> 启动，注意关闭命令窗口会自动退出</li>\n<li>配置文件 <code>data\\config.json</code> 要改成高位端口，否则起不来，闪退</li>\n<li>防火墙要放行，应该自动弹出确认</li>\n<li>alist 也可装到 OpenWrt 上，需要添加新的源，ipk 安装，<a href=\"https://www.bilibili.com/video/BV1qM411U7o7\">参考</a></li>\n<li>alist 添加 onedrive <a href=\"https://alist.nn.ci/zh/guide/drivers/onedrive_app.html\">文档</a></li>\n</ul>\n</li>\n<li>rclone<ul>\n<li><code>rclone.conf</code> 放在同一文件夹，rclone 会 <a href=\"https://rclone.org/docs/#config-config-file\">自动使用</a>，也可手动指定 <code>·--config=CONFIG_FILE</code></li>\n<li><code>rclone config</code> 进行配置向导</li>\n<li>使用 remote path 来指定操作对象，remote 是 config 中配置的，path 是里面的路径<ul>\n<li>如对于 alist 的阿里云盘备份路径为 <code>alist_local:/阿里云盘/d_backup</code></li>\n<li>列出目录<code>rclone ls remote:path # lists a remote</code></li>\n<li>挂载 <code>rclone.exe --cache-dir=rc_cache --temp-dir=rc_temp mount alist_local: Y: --vfs-cache-mode full</code></li>\n<li>这里把 cache 和 temp 指向当前目录，用 <code>rclone.exe config paths</code> 确认当前设置的路径</li>\n<li>其它命令见 <a href=\"https://rclone.org/docs/\">文档</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OneDrive E5<ul>\n<li>参考 <a href=\"https://www.youtube.com/watch?v=4NmPlEf4FTk\">科技lion</a> 申请</li>\n<li>用 <a href=\"https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X\">docker</a> 刷新</li>\n<li>docker 开放的是不安全的 http，因此只监听在本地，用 ssh 做中转，类似 ssh -L 功能，<a href=\"https://superuser.com/questions/125043/web-browsing-over-ssh\">参考</a></li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://synrst.de/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/git/",
            "url": "https://synrst.de/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/git/",
            "title": "git",
            "date_published": "1970-01-01T00:00:00.000Z",
            "content_html": "<h1 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1 基础\"></a>1 基础</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">初级教程</a>、 <a href=\"/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/git/../atlassian-git-cheatsheet.pdf\">命令总结文档</a>、<a href=\"/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.%20%E5%88%86%E4%BA%AB%E4%B8%8E%E5%A4%87%E4%BB%BD/git/../progit.pdf\">Pro Git 2nd</a>、<a href=\"https://git-scm.com/book/en/v2\">Pro Git 2nd</a>（网页版）</p>\n<ol>\n<li>git 特点分布式，不必联网。建议文本 <code>UTF-8</code> 编码</li>\n<li>安装 linux上 apt-get 或者 源码， <a href=\"https://git-scm.com/downloads\">windows版本</a></li>\n<li>设置全局的用户名和邮箱，设置代理，初始化 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span><br><span class=\"line\">   <span class=\"comment\"># 不设置 email</span></span><br><span class=\"line\">   git config --global user.email <span class=\"string\">&#x27;&lt;&gt;&#x27;</span></span><br><span class=\"line\">   <span class=\"comment\"># 支持中文路径和文件名</span></span><br><span class=\"line\">   git config --global core.quotepath <span class=\"literal\">false</span></span><br><span class=\"line\">   <span class=\"comment\"># 编辑器设为 vi</span></span><br><span class=\"line\">   git config --global core.editor <span class=\"string\">&quot;vi&quot;</span> </span><br><span class=\"line\">   <span class=\"comment\"># 查看设置</span></span><br><span class=\"line\">   git config --list</span><br><span class=\"line\">   git config --global core.autocrlf <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 提交简写</span></span><br><span class=\"line\">git config --global alias.ac <span class=\"string\">&#x27;!git add -A &amp;&amp; git commit -m&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>git pull 默认取所有分支，–all 取所有 remote。git push 默认当前分支，–all 所有分支</li>\n<li>代理，只用 ssh 协议，不用 http。<a href=\"https://www.v2ex.com/t/843383\">参考</a> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    Hostname ssh.github.com</span><br><span class=\"line\">    IdentityFile C:\\Users\\XXX\\.ssh\\id_ed25519</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    Port 443</span><br><span class=\"line\">    ProxyCommand &quot;D:\\soft\\Git\\mingw64\\bin\\connect.exe&quot; -S 127.0.0.1:17890 %h %p</span><br><span class=\"line\">Host *</span><br><span class=\"line\">    IdentityFile C:\\Users\\XXX\\.ssh\\id_rsa</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"1-1-图形工具\"><a href=\"#1-1-图形工具\" class=\"headerlink\" title=\"1.1 图形工具\"></a>1.1 图形工具</h2><p>参考 <a href=\"https://stackoverflow.com/questions/572237/whats-the-best-three-way-merge-tool\">best-three-way-merge-tool</a>，使用 p4merge 和 meld</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install meld</span><br><span class=\"line\">git config --global diff.tool meld</span><br><span class=\"line\"><span class=\"comment\"># 官网注册下载</span></span><br><span class=\"line\"><span class=\"comment\"># 使用手册 https://www.perforce.com/manuals/p4merge/Content/P4Merge/Home-p4merge.html</span></span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /home/zack/bin/p4v-2019.1.1830398/bin/p4merge /usr/local/bin/p4merge</span><br><span class=\"line\">git config --global merge.tool p4merge</span><br><span class=\"line\"><span class=\"built_in\">cat</span> ~/.gitconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以选择关闭</span></span><br><span class=\"line\">git config --global difftool.prompt <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># windows 下的配置，User/用户名/.gitconfig，注意路径斜杠用 /</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 meld 的字体时选择 Yahei Consolas Hybrid，指定英文字体时会因为没有中文字符显示乱码</span></span><br><span class=\"line\">[http]</span><br><span class=\"line\">\tproxy = socks5://127.0.0.1:17890</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\temail = &lt;&gt;</span><br><span class=\"line\">\tname = Jian-Feng Du</span><br><span class=\"line\">[core]</span><br><span class=\"line\">\tquotepath = <span class=\"literal\">false</span></span><br><span class=\"line\">[diff]</span><br><span class=\"line\">\ttool = meld</span><br><span class=\"line\">[difftool]</span><br><span class=\"line\">\tprompt = <span class=\"literal\">true</span></span><br><span class=\"line\">[difftool <span class=\"string\">&quot;meld&quot;</span>]</span><br><span class=\"line\">\tcmd = <span class=\"string\">&quot;\\&quot;D:/soft/Meld/Meld.exe\\&quot; \\&quot;<span class=\"variable\">$LOCAL</span>\\&quot; \\&quot;<span class=\"variable\">$REMOTE</span>\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>受限于网速时可用 vimdiff</p>\n<ul>\n<li><a href=\"https://gist.github.com/mattratleph/4026987\">一些按键</a></li>\n<li><a href=\"https://stackoverflow.com/a/45309395\">关于 merge 的按键</a></li>\n</ul>\n<h2 id=\"1-2-查看修改和历史\"><a href=\"#1-2-查看修改和历史\" class=\"headerlink\" title=\"1.2 查看修改和历史\"></a>1.2 查看修改和历史</h2><ul>\n<li><code>git diff</code> 比较的是工作区与暂存区的差异，<code>git diff HEAD -- readme.txt</code> 用来比较工作区与分支的差异，<code>git diff --cached</code> 比较暂存区与分支差异</li>\n<li>commit 的几种表示法详见 <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection\">Revision-Selection</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看历史提交</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">&#x27;%C(yellow)%h%Creset %C(green)%cd%Creset %C(blue)%d%Creset %s&#x27;</span> --<span class=\"built_in\">date</span>=format:%m-%d --graph 1.1.1^..HEAD </span><br><span class=\"line\">git config --global alias.lg <span class=\"string\">&quot;log --pretty=&#x27;%C(yellow)%h%Creset %C(green)%cd%Creset %C(blue)%d%Creset %s&#x27; --date=format:%m-%d --graph&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 找到第一个 commit</span></span><br><span class=\"line\">git rev-list --max-parents=0 --pretty HEAD</span><br><span class=\"line\"><span class=\"comment\"># 查看历史修改的文件列表</span></span><br><span class=\"line\">git diff-tree --no-commit-id --name-only -r bd61ad98</span><br><span class=\"line\"><span class=\"comment\"># 某个文件的历史修改</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p -- filename</span><br><span class=\"line\"><span class=\"comment\"># 也可以使用脚本 diff_hist.sh 见资源</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-改写历史\"><a href=\"#1-3-改写历史\" class=\"headerlink\" title=\"1.3 改写历史\"></a>1.3 改写历史</h2><p><a href=\"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History\">Rewriting-History</a></p>\n<p>git merge 和 git rebase 都是先切换到目标分支，然后指定源分支的方式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把一个提交应用到多个分支上</span></span><br><span class=\"line\">git cherry-pick &lt;commit <span class=\"built_in\">id</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-回到过去\"><a href=\"#1-4-回到过去\" class=\"headerlink\" title=\"1.4 回到过去\"></a>1.4 回到过去</h2><p><a href=\"https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified\">Reset and checkout</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">HEAD</th>\n<th align=\"left\">Index</th>\n<th align=\"left\">Workdir</th>\n<th>WD Safe?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Commit Level</strong></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><code>reset --soft [commit]</code></td>\n<td align=\"left\">REF</td>\n<td align=\"left\">NO</td>\n<td align=\"left\">NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td align=\"left\"><code>reset [commit]</code></td>\n<td align=\"left\">REF</td>\n<td align=\"left\">YES</td>\n<td align=\"left\">NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td align=\"left\"><code>reset --hard [commit]</code></td>\n<td align=\"left\">REF</td>\n<td align=\"left\">YES</td>\n<td align=\"left\">YES</td>\n<td><strong>NO</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><code>checkout &lt;commit&gt;</code></td>\n<td align=\"left\">HEAD</td>\n<td align=\"left\">YES</td>\n<td align=\"left\">YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>File Level</strong></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><code>reset [commit] &lt;paths&gt;</code></td>\n<td align=\"left\">NO</td>\n<td align=\"left\">YES</td>\n<td align=\"left\">NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td align=\"left\"><code>checkout [commit]/index &lt;paths&gt;</code></td>\n<td align=\"left\">NO</td>\n<td align=\"left\">YES&#x2F;NO</td>\n<td align=\"left\">YES</td>\n<td><strong>NO</strong></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用远端还原本地</span></span><br><span class=\"line\">git fetch</span><br><span class=\"line\">git checkout origin/dev -- src_comm/tiny_config.c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-5-加快下载\"><a href=\"#1-5-加快下载\" class=\"headerlink\" title=\"1.5 加快下载\"></a>1.5 加快下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shallow clone，可以不把全部的 commit 和 branch 都下载下来，节省下载时间</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 url</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 --single-branch --branch branch url</span><br><span class=\"line\">git fetch --unshallow</span><br><span class=\"line\">git fetch --depth=200</span><br><span class=\"line\"><span class=\"comment\"># https://stackoverflow.com/questions/6802145/how-to-convert-a-git-shallow-clone-to-a-full-clone</span></span><br><span class=\"line\">git config remote.origin.fetch <span class=\"string\">&quot;+refs/heads/*:refs/remotes/origin/*&quot;</span></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载失败可以尝试修改</span></span><br><span class=\"line\">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-用-subtree-管理库\"><a href=\"#2-用-subtree-管理库\" class=\"headerlink\" title=\"2 用 subtree 管理库\"></a>2 用 subtree 管理库</h1><ul>\n<li>不像 submodule 显示的写到 git 配置文件中，但一次 clone 就包含所有文件，管理更简单</li>\n<li>介绍见 <a href=\"https://gist.github.com/2-3-5-7/0c00a7651b99a82356de2c4b516725af\">Git Subtree Basics</a>、<a href=\"https://www.atlassian.com/git/tutorials/git-subtree\">Git subtree: the alternative to Git submodule</a></li>\n</ul>\n<h1 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3 问题\"></a>3 问题</h1><h2 id=\"3-1-多个远端仓库\"><a href=\"#3-1-多个远端仓库\" class=\"headerlink\" title=\"3.1 多个远端仓库\"></a>3.1 多个远端仓库</h2><p>只要远端不同，同一公钥可以用在多处仓库，只有在<strong>同一网站</strong>（比如 github）上有多个账号时需要配置多个 key</p>\n<h3 id=\"3-1-1-生成新-key\"><a href=\"#3-1-1-生成新-key\" class=\"headerlink\" title=\"3.1.1 生成新 key\"></a>3.1.1 生成新 key</h3><ol>\n<li>按照 <a href=\"https://www.awaimai.com/2200.html\">git配置多个SSH Key</a>  ，其中命令可以指定文件名 <code>ssh-keygen -t rsa -b 4096 -C &quot;another_mail@qq.com&quot; -f id_rsa_github</code></li>\n<li>页面上添加对应公钥</li>\n</ol>\n<h3 id=\"3-1-2-添加-remote\"><a href=\"#3-1-2-添加-remote\" class=\"headerlink\" title=\"3.1.2 添加 remote\"></a>3.1.2 添加 remote</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/user/repo.git</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-3-设置-track-分支\"><a href=\"#3-1-3-设置-track-分支\" class=\"headerlink\" title=\"3.1.3 设置 track 分支\"></a>3.1.3 设置 track 分支</h3><p><a href=\"https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch\">track-remote-upstream-branch</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set upstream when pushing to remote</span></span><br><span class=\"line\">git push -u origin topic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set upstream without pushing it</span></span><br><span class=\"line\"><span class=\"comment\"># with option -u / --set-upstream-to</span></span><br><span class=\"line\">git branch -u origin/topic</span><br><span class=\"line\">git branch --set-upstream-to=origin/topic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> .git/config</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-个人代码同步\"><a href=\"#3-2-个人代码同步\" class=\"headerlink\" title=\"3.2 个人代码同步\"></a>3.2 个人代码同步</h2><p>对未改完的代码提交一个临时的 commit，两端都基于这个 commit 来改代码（使用 commit –amend）和同步，已经修改完成则将 commit message 修改或 rebase 整理历史。</p>\n<p>参考 <a href=\"https://stackoverflow.com/questions/9813816/git-pull-after-forced-update\">git-pull-after-forced-update</a>，两端都按下面步骤进行</p>\n<ol>\n<li>取回使用 <code>git pull --rebase</code> 来更新另一端的提交</li>\n<li>修改代码</li>\n<li>改写历史 <code>git rebase -i HEAD~~</code> 或合并到最近的历史  <code>git commit --amend</code></li>\n<li>更新提交历史 <code>git push -f</code></li>\n</ol>\n<h2 id=\"3-3-删除分支\"><a href=\"#3-3-删除分支\" class=\"headerlink\" title=\"3.3 删除分支\"></a>3.3 删除分支</h2><p>3 种情况，远端、本地、本地的 track 分支 <a href=\"https://cmatskas.com/delete-git-branch-locally-and-remotely/\">Delete Git branch locally and remotely</a></p>\n<h2 id=\"3-4-查找谁引入的问题\"><a href=\"#3-4-查找谁引入的问题\" class=\"headerlink\" title=\"3.4 查找谁引入的问题\"></a>3.4 查找谁引入的问题</h2><ul>\n<li>git bisect 指定两个 commit 来二分查找，good&#x2F;old –&gt; bad&#x2F;new，详情见 <a href=\"https://git-scm.com/docs/git-bisect\">git bisect</a> 和 <a href=\"https://git-scm.com/docs/git-bisect-lk2009\">Fighting regressions with git bisect</a></li>\n<li>辅助用 <a href=\"https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-blame\">git blame 或 git log -S</a></li>\n</ul>\n",
            "tags": []
        }
    ]
}